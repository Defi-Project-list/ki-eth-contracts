{
  "contractName": "FactoryClaimable",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LATEST",
      "outputs": [
        {
          "internalType": "bytes8",
          "name": "",
          "type": "bytes8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swProxy",
      "outputs": [
        {
          "internalType": "contract Proxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swProxyLatest",
      "outputs": [
        {
          "internalType": "contract ProxyLatest",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LATEST\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swProxy\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swProxyLatest\",\"outputs\":[{\"internalType\":\"contract ProxyLatest\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension for the Ownable contract, where the ownership needs to be claimed. This allows the new owner to accept the transfer.\",\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"Allows the pendingOwner address to finalize the transfer.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to set the pendingOwner address.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"Claimable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/FactoryClaimable.sol\":\"FactoryClaimable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":400},\"remappings\":[]},\"sources\":{\"/Users/Tal/code/kirobo/ki-eth-contracts/contracts/FactoryStorage.sol\":{\"keccak256\":\"0x66c2fb9ea9819b4ebff4e6301fbc05492785dbcac88b20415e9baf9642c353e0\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://b21acd6aef760341a66ad1a74962696d5b2d0f34a73002cf190f861933a486a9\",\"dweb:/ipfs/QmTX4z5iBrPWXr4S4dG1VxqZuv8UHMKboocLUAbpEyEvKp\"]},\"/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/FactoryClaimable.sol\":{\"keccak256\":\"0x184d007ed174134bc423be2f0ff2acf5d82020c85d4b557fe3d2ca231fc5593f\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://cd800cb5ede842077ad3b4d190ad44fc0be384f80a5fbdfc4510da43972d644e\",\"dweb:/ipfs/QmRJJ5rJkCKNArZBSaGsPfLnHeip1DdXchJzCAi6FST6dy\"]},\"/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/FactoryOwnable.sol\":{\"keccak256\":\"0x27c1fc846a3e54a3e9977d1846b40b3cdd840aeb7125181f3260e8fcb6346e58\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://713f532d7e513a4c719450632cd73b1a6d4cf7ce9eabf540b709367ac64ed587\",\"dweb:/ipfs/QmUZjaXv37Wpd3SqKHK6BezFiLR9zVzgXajLJmwupm6CM7\"]},\"/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/MultiSig.sol\":{\"keccak256\":\"0x52394a94169011b8a5ec02b6c3c9803f8a67373953e7eda1a5c48e4a20e74072\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://b6b5a5c0b629c17790d78e895b6171808761c58882a39222c42d4fb1a86731ce\",\"dweb:/ipfs/QmXYdE8pdwctK4KVNag815QFFf3ZSraaak71sMSDdMWAZ9\"]},\"/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/Proxy.sol\":{\"keccak256\":\"0x0b699927542abd04c4cbc4f914e036c7c70c18f9764f49e32704951f723b543b\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9eb925d50948b6506980c41819a9b92b223023733bce0166c4079d953324efaf\",\"dweb:/ipfs/QmXGXMiRpZRDvgtd3egGKyCtAhhDo9yPavygSe4WK3wthe\"]},\"/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/ProxyLatest.sol\":{\"keccak256\":\"0xfc97e887025251fbaf5d01b172f8f09c2af0d5f5ee614e3b836cb0ba5383d915\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://118d5814138793ce39aaf881f9272bec0898e0d35e7dd2f831c4c5e78277b75b\",\"dweb:/ipfs/QmVbqittvRsFiV9PPaU4nb7rcbgBuytzmf8hRhdBDnU3Q7\"]},\"/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/StorageBase.sol\":{\"keccak256\":\"0x7b94431294a38e983340d28efc098aa34662e0fb1eb3a0df8bef47db33f2f667\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://10e3eb128cc024fa58a7c1d43da1d66a24137c64e60725ba2165d77b15ab28ad\",\"dweb:/ipfs/QmP7jD8S3wDtBUwfv6uskrpyFkiCaYP2mu2pDBqc8hnabw\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.11;\n\nimport \"./FactoryOwnable.sol\";\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\nabstract contract FactoryClaimable is FactoryOwnable {\n    //address public pendingOwner; Moved to FactoryStorage\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n        // require(msg.sender == pendingOwner, \"not pending owner\");\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public /*onlyOwner*/ override pure{\n        // pendingOwner = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n        // emit OwnershipTransferred(owner, pendingOwner);\n        // owner = pendingOwner;\n        // pendingOwner = address(0);\n    }\n}\n",
  "sourcePath": "/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/FactoryClaimable.sol",
  "ast": {
    "absolutePath": "/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/FactoryClaimable.sol",
    "exportedSymbols": {
      "FactoryClaimable": [
        3617
      ]
    },
    "id": 3618,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3592,
        "literals": [
          "solidity",
          "0.6",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "40:23:9"
      },
      {
        "absolutePath": "/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/FactoryOwnable.sol",
        "file": "./FactoryOwnable.sol",
        "id": 3593,
        "nodeType": "ImportDirective",
        "scope": 3618,
        "sourceUnit": 3668,
        "src": "65:30:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3595,
              "name": "FactoryOwnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3667,
              "src": "301:14:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_FactoryOwnable_$3667",
                "typeString": "contract FactoryOwnable"
              }
            },
            "id": 3596,
            "nodeType": "InheritanceSpecifier",
            "src": "301:14:9"
          }
        ],
        "contractDependencies": [
          1188,
          3667,
          4851
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 3594,
          "nodeType": "StructuredDocumentation",
          "src": "97:165:9",
          "text": " @title Claimable\n @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n This allows the new owner to accept the transfer."
        },
        "fullyImplemented": false,
        "id": 3617,
        "linearizedBaseContracts": [
          3617,
          3667,
          1188,
          4851
        ],
        "name": "FactoryClaimable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3600,
              "nodeType": "Block",
              "src": "506:87:9",
              "statements": [
                {
                  "id": 3599,
                  "nodeType": "PlaceholderStatement",
                  "src": "585:1:9"
                }
              ]
            },
            "documentation": {
              "id": 3597,
              "nodeType": "StructuredDocumentation",
              "src": "382:91:9",
              "text": " @dev Modifier throws if called by any account other than the pendingOwner."
            },
            "id": 3601,
            "name": "onlyPendingOwner",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 3598,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "503:2:9"
            },
            "src": "478:115:9",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              3649
            ],
            "body": {
              "id": 3608,
              "nodeType": "Block",
              "src": "822:43:9",
              "statements": []
            },
            "documentation": {
              "id": 3602,
              "nodeType": "StructuredDocumentation",
              "src": "599:139:9",
              "text": " @dev Allows the current owner to set the pendingOwner address.\n @param newOwner The address to transfer ownership to."
            },
            "functionSelector": "f2fde38b",
            "id": 3609,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferOwnership",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 3606,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "809:8:9"
            },
            "parameters": {
              "id": 3605,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3604,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 3609,
                  "src": "770:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3603,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "770:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "769:18:9"
            },
            "returnParameters": {
              "id": 3607,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "822:0:9"
            },
            "scope": 3617,
            "src": "743:122:9",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3615,
              "nodeType": "Block",
              "src": "1005:137:9",
              "statements": []
            },
            "documentation": {
              "id": 3610,
              "nodeType": "StructuredDocumentation",
              "src": "871:79:9",
              "text": " @dev Allows the pendingOwner address to finalize the transfer."
            },
            "functionSelector": "4e71e0c8",
            "id": 3616,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3613,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3612,
                  "name": "onlyPendingOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3601,
                  "src": "988:16:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "988:16:9"
              }
            ],
            "name": "claimOwnership",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 3611,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "978:2:9"
            },
            "returnParameters": {
              "id": 3614,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1005:0:9"
            },
            "scope": 3617,
            "src": "955:187:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 3618,
        "src": "263:881:9"
      }
    ],
    "src": "40:1105:9"
  },
  "legacyAST": {
    "absolutePath": "/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/FactoryClaimable.sol",
    "exportedSymbols": {
      "FactoryClaimable": [
        3617
      ]
    },
    "id": 3618,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3592,
        "literals": [
          "solidity",
          "0.6",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "40:23:9"
      },
      {
        "absolutePath": "/Users/Tal/code/kirobo/ki-eth-contracts/contracts/lib/FactoryOwnable.sol",
        "file": "./FactoryOwnable.sol",
        "id": 3593,
        "nodeType": "ImportDirective",
        "scope": 3618,
        "sourceUnit": 3668,
        "src": "65:30:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3595,
              "name": "FactoryOwnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3667,
              "src": "301:14:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_FactoryOwnable_$3667",
                "typeString": "contract FactoryOwnable"
              }
            },
            "id": 3596,
            "nodeType": "InheritanceSpecifier",
            "src": "301:14:9"
          }
        ],
        "contractDependencies": [
          1188,
          3667,
          4851
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 3594,
          "nodeType": "StructuredDocumentation",
          "src": "97:165:9",
          "text": " @title Claimable\n @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n This allows the new owner to accept the transfer."
        },
        "fullyImplemented": false,
        "id": 3617,
        "linearizedBaseContracts": [
          3617,
          3667,
          1188,
          4851
        ],
        "name": "FactoryClaimable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3600,
              "nodeType": "Block",
              "src": "506:87:9",
              "statements": [
                {
                  "id": 3599,
                  "nodeType": "PlaceholderStatement",
                  "src": "585:1:9"
                }
              ]
            },
            "documentation": {
              "id": 3597,
              "nodeType": "StructuredDocumentation",
              "src": "382:91:9",
              "text": " @dev Modifier throws if called by any account other than the pendingOwner."
            },
            "id": 3601,
            "name": "onlyPendingOwner",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 3598,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "503:2:9"
            },
            "src": "478:115:9",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              3649
            ],
            "body": {
              "id": 3608,
              "nodeType": "Block",
              "src": "822:43:9",
              "statements": []
            },
            "documentation": {
              "id": 3602,
              "nodeType": "StructuredDocumentation",
              "src": "599:139:9",
              "text": " @dev Allows the current owner to set the pendingOwner address.\n @param newOwner The address to transfer ownership to."
            },
            "functionSelector": "f2fde38b",
            "id": 3609,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferOwnership",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 3606,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "809:8:9"
            },
            "parameters": {
              "id": 3605,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3604,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 3609,
                  "src": "770:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3603,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "770:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "769:18:9"
            },
            "returnParameters": {
              "id": 3607,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "822:0:9"
            },
            "scope": 3617,
            "src": "743:122:9",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3615,
              "nodeType": "Block",
              "src": "1005:137:9",
              "statements": []
            },
            "documentation": {
              "id": 3610,
              "nodeType": "StructuredDocumentation",
              "src": "871:79:9",
              "text": " @dev Allows the pendingOwner address to finalize the transfer."
            },
            "functionSelector": "4e71e0c8",
            "id": 3616,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3613,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3612,
                  "name": "onlyPendingOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3601,
                  "src": "988:16:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "988:16:9"
              }
            ],
            "name": "claimOwnership",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 3611,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "978:2:9"
            },
            "returnParameters": {
              "id": 3614,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1005:0:9"
            },
            "scope": 3617,
            "src": "955:187:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 3618,
        "src": "263:881:9"
      }
    ],
    "src": "40:1105:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.11+commit.5ef660b1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.0",
  "updatedAt": "2020-08-30T11:48:45.451Z",
  "devdoc": {
    "details": "Extension for the Ownable contract, where the ownership needs to be claimed. This allows the new owner to accept the transfer.",
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "Allows the pendingOwner address to finalize the transfer."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to set the pendingOwner address.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    },
    "title": "Claimable",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    },
    "version": 1
  }
}